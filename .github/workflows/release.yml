name: Publish

on:
  release:
    types: [released]

jobs:
  version:
    runs-on: ubuntu-latest

    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # - name: 'Use NodeJS 18'
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: 18
      #     registry-url: 'https://registry.npmjs.org'
      #     scope: '@prestashopcorp'
      #     always-auth: true

      # - name: 'Install dependencies'
      #   run: yarn install

      # - name: 'Build packages'
      #   run: npx lerna run build

      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Test
        run: |
          echo $RELEASE_VERSION
          echo ${{ env.RELEASE_VERSION }}

      - name: 'Version'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor}}@users.noreply.github.com"

          yarn version --new-version ${{ env.RELEASE_VERSION }} --no-git-tag-version --no-commit-hooks

  release:
    runs-on: ubuntu-latest

    needs: ["version"]

    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # - name: 'Use NodeJS 18'
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: 18
      #     registry-url: 'https://registry.npmjs.org'
      #     scope: '@prestashopcorp'
      #     always-auth: true

      # - name: 'Install dependencies'
      #   run: yarn install

      # - name: 'Build packages'
      #   run: npx lerna run build

      # - name: 'Version and publish'
      #   env:
      #     NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      #   run: |
      #     git config user.name "${{ github.actor }}"
      #     git config user.email "${{ github.actor}}@users.noreply.github.com"

      #     if [ ${{ github.base_ref }} = development ]; then
      #       npx lerna version --conventional-commits --conventional-prerelease --preid beta --yes
      #     else
      #       npx lerna version --conventional-commits --conventional-graduate --yes
      #     fi

      #     npx lerna publish from-git --yes

      - name: Test
        run: |
          echo $RELEASE_VERSION
          echo ${{ env.RELEASE_VERSION }}
          cat package.json
